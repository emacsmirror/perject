* perject

This package allows the user to manage multiple projects in a single Emacs instance.

** The Name
The name is a play on "per project", since this package manages frames and buffers per project.

** Installation and Setup
Currently not on [[https://melpa.org/][melpa]].

With [[https://github.com/jwiegley/use-package][use-package]], the code looks as follows:
#+BEGIN_SRC emacs-lisp
(use-package perject
  :ensure nil
  :load-path ;; your load path
  :config (perject-mode 1))
#+END_SRC

If you use [[https://github.com/raxod502/straight.el][straight]], you can simplify this to...

** Setup
TODO
** Connection to desktop.el
As mentioned, /perject/ uses the built-in package /desktop.el/ under the hood.

It provides an extended interface to this package.
As such, the user should not manually call commands like =desktop-save= and =desktop-read=.
Instead, use commands like =perject-save-project= and =perject-open-project=.

Furthermore, to avoid unexpected behavior, the user should ensure that the hooks of /desktop.el/
are not modified in the config file.
The variables of /desktop.el/ may be altered, but some have no effect on /perject/ since they are overwritten.
The variables that have no effect include:
- =desktop-dirname=
- =desktop-restore-reuses-frames=
- =desktop-load-locked-desktop=
- =desktop-buffers-not-to-save-function= (replaced by =perject-buffers-not-to-save-function=)

** Integration with other Packages
In =desktop-after-read-hook= and =desktop-save-hook= the functions can access =perject--desktop-current-project=
to obtain the current project name (which might be nil).
** Issues
Whether /perject/ raises and focuses a frame in certain situations depends on the value of the variable
/perject-raise-and-focus-frame/. In that case, the function /select-frame-set-input-focus/ is used to raise and focus
a frame in /perject-open-collection/ and at startup.
However, depending on the window manager, there might be some weird behaviors with Emacs not focusing the frame properly.
A value of /t/ for this variable works best for *KDE Plasma*, which I use. If the variable is /nil/, the old frame stays
at the "front" (my Emacs is always maximized) but the focus is on the newly restored frame "behind" it.
I suspect that the behavior depends on the used window manager and as such I added the above variable in order
to disable the default behavior.
By setting it to /nil/, the user can supply a custom function (add it to /perject-open-collection/ and /perject-after-init-hook/).

** Display Mode Line Information
Perject provides two mode line constructs.
The first one displays the project and collection name (and tabs if /perject-tab-mode/ is enabled).
It is displayed automatically whenever /perject-mode/ is enabled (and the current frame belongs to a collection or project).
Perject also defines the mode line construct *perject-mode-line-current*.
TODO
* desktop.el
| desktop.el              | perject.el                      |
|-------------------------+---------------------------------|
| desktop-after-read-hook | perject-desktop-after-load-hook |
| desktop-save-hook       | perject-desktop-save-hook       |
* TODO Talk about perject-consult and perject-ibuffer; Find a good place for perject-ivy
* Testing functions (working)
- perject-delete-project
- All functions from "Managing frames"
* TODO Tests
- save-on-exit and load-at-startup
- test the customize interface
- test perject-buffers-not-to-save-function
* Explain how to add e.g. scratch buffer to every project
* Write about support e.g. macos, windows, exwm,
